function KutatoBuilder(){this.betas=new Array}function BayesDirBuilder(){this.betas=new Array}function KutatoBeta(e){this.N_ijk=e;this.r_i=e.length;this.N_ij=multidir.sum(this.N_ijk)}function Beta(e,t,n){this.N_ijk=e;this.H_ijk=t;this.H=n}function Kutato(e){this.betas=e}function BayesDir(e){this.betas=e}function LogGamma(e){if(e>0)this.x=e-1;else this.x=1}function LogGammaRatio(e,t){this.x=new LogGamma(e);this.y=new LogGamma(t)}multidir={};multidir.sum=function(e){var t=0;for(var n=0;n<e.length;n++){t+=e[n]}return t};KutatoBuilder.prototype.add=function(e){this.betas.push(new KutatoBeta(e));return this};KutatoBuilder.prototype.build=function(){var e=new Kutato(this.betas);return e};BayesDirBuilder.prototype.addCounts=function(e){this.betas.push(new Beta(e,undefined,undefined));return this};BayesDirBuilder.prototype.addCountWithHyperparams=function(e,t){this.betas.push(new Beta(e,t,undefined));return this};BayesDirBuilder.prototype.addCountsWithSingleHyperparam=function(e,t){this.betas.push(new Beta(e,undefined,t));return this};BayesDirBuilder.prototype.build=function(){var e=new BayesDir(this.betas);return e};KutatoBeta.prototype.get=function(){var e=(new LogGammaRatio(this.r_i,this.N_ij+this.r_i)).get();for(var t=0;t<this.N_ijk.length;t++){e+=(new LogGamma(this.N_ijk[t]+1)).get()}return e};Beta.prototype.get=function(){var e=multidir.sum(this.N_ijk);var t=this.N_ijk.length;var n=true;if(this.H&&this.H>0){t=this.H*this.N_ijk.length;n=false}else if(this.H_ijk&&this.H_ijk.length>0){t=multidir.sum(this.H_ijk);n=false}var r=(new LogGammaRatio(t,e)).get();for(var i=0;i<this.N_ijk.length;i++){if(n){r+=(new LogGammaRatio(1+this.N_ijk[i],1)).get()}else{if(this.H&&this.H>0){r+=(new LogGammaRatio(this.H+this.N_ijk[i],this.H)).get()}else{r+=(new LogGammaRatio(this.H_ijk[i]+this.N_ijk[i],this.H_ijk[i])).get()}}}return r};Kutato.prototype.get=function(){if(!this.betas||this.betas.length<1)return Number.NaN;var e=0;for(var t=0;t<this.betas.length;t++){e+=this.betas[t].get()}return e};BayesDir.prototype.get=function(){if(!this.betas||this.betas.length<1)return Number.NaN;var e=0;for(var t=0;t<this.betas.length;t++){e+=this.betas[t].get()}return e};LogGamma.prototype.getX=function(){return this.x+1};LogGamma.prototype.get=function(){var e=0;for(var t=this.x;t>=2;t--){var n=Math.log(t);e+=n}return e};LogGammaRatio.prototype.get=function(){var e=this.x.get();var t=this.y.get();var n=e-t;return n}